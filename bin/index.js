function main() {
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ö–æ–ª—Å—Ç
var canvas = document.getElementById("gameCanvas");
var context = canvas.getContext("2d");
var health = 100; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ HP
var armor = 0; // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
var audio = document.getElementById("noise");
var playButton = document.getElementById("playButton");
audio.volume = 0.1; // –º—É–∑—ã–∫–∞

hideGameOver();

function showGameOver() {
  const gameOverElement = document.getElementById("game-over");
  gameOverElement.style.display = "block";
  return update()
}

function hideGameOver() {
  const gameOverElement = document.getElementById("game-over");
  gameOverElement.style.display = "none";
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ –≤ Local Storage
if (localStorage.getItem("isPlaying") === "true") {
  // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ "–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è", –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  audio.play();
  playButton.innerHTML = "üîâ"; // –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–ü–∞—É–∑–∞"
} else {
  // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ "–Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è", –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  audio.pause();
  playButton.innerHTML = "üîä"; // –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
playButton.addEventListener("click", function() {
  if (audio.paused) {
    // –ï—Å–ª–∏ –∞—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    audio.play();
    playButton.innerHTML = "üîâ"; // –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–ü–∞—É–∑–∞"
    localStorage.setItem("isPlaying", "true"); // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Local Storage
  } else {
    // –ï—Å–ª–∏ –∞—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
    audio.pause();
    playButton.innerHTML = "üîä"; // –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"
    localStorage.setItem("isPlaying", "false"); // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Local Storage
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–¥–µ–ª–∏
var playerImages = {
  up: new Image(),
  down: new Image(),
  left: new Image(),
  right: new Image()
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–¥–µ–ª–∏
playerImages.up.src = "custom/king-up5.png"; // –ó–∞–º–µ–Ω–∏—Ç–µ "custom/skeleton-up2.png" –Ω–∞ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –º–æ–¥–µ–ª–∏, —Å–º–æ—Ç—Ä—è—â–µ–π –≤–≤–µ—Ä—Ö
playerImages.down.src = "custom/king-down5.png"; // –ó–∞–º–µ–Ω–∏—Ç–µ "custom/skeleton-down2.png" –Ω–∞ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –º–æ–¥–µ–ª–∏, —Å–º–æ—Ç—Ä—è—â–µ–π –≤–Ω–∏–∑
playerImages.left.src = "custom/king-left5.png"; // –ó–∞–º–µ–Ω–∏—Ç–µ "custom/skeleton-left2.png" –Ω–∞ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –º–æ–¥–µ–ª–∏, —Å–º–æ—Ç—Ä—è—â–µ–π –≤–ª–µ–≤–æ
playerImages.right.src = "custom/king-right5.png"; // –ó–∞–º–µ–Ω–∏—Ç–µ "custom/skeleton-right2.png" –Ω–∞ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –º–æ–¥–µ–ª–∏, —Å–º–æ—Ç—Ä—è—â–µ–π –≤–ø—Ä–∞–≤–æ

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—Ç—Ä–µ–ª—ã
var arrowAnimation = new Image();
arrowAnimation.src = "custom/2345.gif"; // –ó–∞–º–µ–Ω–∏—Ç–µ "custom/re.gif" –Ω–∞ –ø—É—Ç—å –∫ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É GIF-—Ñ–∞–π–ª—É —Å—Ç—Ä–µ–ª—ã


function updateStats() {
  var healthBar = document.getElementById("healthBar");
  var armorBar = document.getElementById("armorBar");

  healthBar.textContent = "HP: " + health + "%";
  armorBar.textContent = "Armor: " + armor;
}


// –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
var playerX = canvas.width / 2;
var playerY = canvas.height / 2;
var playerWidth = 50;
var playerHeight = 50;
var playerSpeed = 5;
var playerDirection = "down"; // –ù–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≥–ª—è–¥–∞ –º–æ–¥–µ–ª–∏

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à
var keys = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à
document.addEventListener("keydown", function(event) {
  keys[event.key] = true;
});

document.addEventListener("keyup", function(event) {
  keys[event.key] = false;
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–æ–∫ –≤ –∏–≥—Ä–µ
var walls = [
    { x: 0, y: 0, width: 0, height: 750 }, // –õ–µ–≤–∞—è —Å—Ç–µ–Ω–∫–∞
    { x: 1, y: 1, width: 1890, height: 1 }, // –í–µ—Ä—Ö–Ω—è—è —Å—Ç–µ–Ω–∫–∞
    { x: 1, y: 730, width: 1, height: 1 }, // –ù–∏–∂–Ω—è—è —Å—Ç–µ–Ω–∫–∞
    { x: 1870, y: 0, width: 0, height: 750 } // –ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∫–∞
  ]; // –ü—Ä–∏–º–µ—Ä —Å—Ç–µ–Ω–∫–∏: x=200, y=100, width=20, height=200

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª—ã
var arrow = {
  x: 0,
  y: 0,
  width: 20,
  height: 20,
  speed: 5,
  direction: Math.PI
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–µ–ª—ã
function updateArrow() {
  arrow.x += Math.cos(arrow.direction) * arrow.speed;
  arrow.y += Math.sin(arrow.direction) * arrow.speed;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ —Å—Ç—Ä–µ–ª—ã –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ö–æ–ª—Å—Ç–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  if (
    arrow.x < 0 ||
    arrow.x + arrow.width > canvas.width ||
    arrow.y < 0 ||
    arrow.y + arrow.height > canvas.height
  ) {
    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å—Ç—Ä–µ–ª—É –≤ —Ä–∞–Ω–¥–æ–º–Ω—É—é —Å—Ç–µ–Ω–∫—É
    var randomWallIndex = Math.floor(Math.random() * walls.length);
    var randomWall = walls[randomWallIndex];
    arrow.x = randomWall.x + randomWall.width / 2;
    arrow.y = randomWall.y + randomWall.height / 2;
    arrow.direction = Math.random() * 2 * Math.PI;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ —Å –∫–∞–∂–¥–æ–π —Å—Ç–µ–Ω–∫–æ–π
function checkCollisionWithWalls() {
  for (var i = 0; i < walls.length; i++) {
    var wall = walls[i];

      playerX < wall.x + wall.width &&
      playerX + playerWidth > wall.x &&
      playerY < wall.y + wall.height &&
      playerY + playerHeight > wall.y
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ —Å–æ —Å—Ç—Ä–µ–ª–æ–π
function checkCollisionWithPlayer() {
  if (
    arrow.x < playerX + playerWidth &&
    arrow.x + arrow.width > playerX &&
    arrow.y < playerY + playerHeight &&
    arrow.y + arrow.height > playerY
  ) {
    health -= 106;
    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å—Ç—Ä–µ–ª—É –≤ —Ä–∞–Ω–¥–æ–º–Ω—É—é —Å—Ç–µ–Ω–∫—É
    var randomWallIndex = Math.floor(Math.random() * walls.length);
    var randomWall = walls[randomWallIndex];
    arrow.x = randomWall.x + randomWall.width / 2;
    arrow.y = randomWall.y + randomWall.height / 2;
    arrow.direction = Math.random() * 2 * Math.PI;
  }
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ –∏ —Å—Ç—Ä–µ–ª—ã
function update() {
    if (health <= 0) {
      showGameOver();
      return; // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    }
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–≥—Ä–æ–∫–∞
  if (keys["ArrowUp"]) {
    playerY -= playerSpeed;
    if (playerY < 0) {
      playerY = 0;
    }
    playerDirection = "up";
  }

  if (keys["ArrowDown"]) {
    playerY += playerSpeed;
    if (playerY > canvas.height - playerHeight) {
      playerY = canvas.height - playerHeight;
    }
    playerDirection = "down";
  }

  if (keys["ArrowLeft"]) {
    playerX -= playerSpeed;
    if (playerX < 0) {
      playerX = 0;
    }
    playerDirection = "left";
  }

  if (keys["ArrowRight"]) {
    playerX += playerSpeed;
    if (playerX > canvas.width - playerWidth) {
      playerX = canvas.width - playerWidth;
    }
    playerDirection = "right";
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å–æ —Å—Ç–µ–Ω–∫–∞–º–∏
  checkCollisionWithWalls();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å—Ç—Ä–µ–ª–æ–π
  checkCollisionWithPlayer();

  // –û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞
  context.clearRect(0, 0, canvas.width, canvas.height);

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∑–≥–ª—è–¥–∞
  switch (playerDirection) {
    case "up":
      context.drawImage(playerImages.up, playerX, playerY, playerWidth, playerHeight);
      break;
    case "down":
      context.drawImage(playerImages.down, playerX, playerY, playerWidth, playerHeight);
      break;
    case "left":
      context.drawImage(playerImages.left, playerX, playerY, playerWidth, playerHeight);
      break;
    case "right":
      context.drawImage(playerImages.right, playerX, playerY, playerWidth, playerHeight);
      break;
  }

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—Ç—Ä–µ–ª—ã
  context.drawImage(arrowAnimation, arrow.x, arrow.y, arrow.width, arrow.height);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å—Ç—Ä–µ–ª—ã
  updateArrow();

  // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
  requestAnimationFrame(update);
  updateStats();
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–¥–µ–ª–∏
Promise.all([
  new Promise((resolve, reject) => {
    playerImages.up.onload = resolve;
  }),
  new Promise((resolve, reject) => {
    playerImages.down.onload = resolve;
  }),
  new Promise((resolve, reject) => {
    playerImages.left.onload = resolve;
  }),
  new Promise((resolve, reject) => {
    playerImages.right.onload = resolve;
  }),
  new Promise((resolve, reject) => {
    arrowAnimation.onload = resolve;
  })
]).then(() => {
  update();
});
};
window.onload = game;